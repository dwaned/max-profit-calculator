import { ITypeMapper } from "./interfaces/typemapper.interface";
import Mapping from "./mapping";
import { getKeyFromPredicate, toType } from "./utils";

export class TypeMapper implements ITypeMapper {
  private mappings: any[] = [];

  createMap<ISource, IDest>(): Mapping<ISource, IDest> {
    const mapping = new Mapping<ISource, IDest>();
    this.mappings.push(mapping);
    return mapping;
  }

  map<ISource, IDest>(source: ISource, destination: IDest | any): IDest {
    const [mapping] = this.mappings;

    const i = mapping as Mapping<ISource, IDest>;
    const { items } = i;

    for (const item of items) {
      const { sourcePredicate, destinationPredicate } = item;

      const sourceKey = getKeyFromPredicate(sourcePredicate);
      const destinationKey = getKeyFromPredicate(destinationPredicate);

      const rawValue = (<any>source)[sourceKey];
      const typedValue = toType(typeof rawValue, rawValue);

      (<any>destination)[destinationKey] = typedValue;
    }

    return destination;
  }

  mapCollection<ISource, IDest>(sources: ISource[], destination: IDest): any {
    return sources.map((source: ISource) => this.map(source, destination));
  }
}
