name: Container Testing & Security Scan

# This workflow builds images and deploys the application and the site using docker-compose-test.yml
# It also runs tests and scans the images for vulnerabilities
on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read
  issues: write
  security-events: write
  packages: read

jobs:
  container-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      TESTCONTAINERS_RYUK_DISABLED: true
      MAVEN_OPTS: "-Xmx2048m"

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: "${{ runner.os }}-maven-${{ hashFiles('pom.xml') }}"
          restore-keys: |
            "${{ runner.os }}-maven-"

      - name: Build and Test
        run: |
          docker compose -f "docker-compose-test.yml" build --no-cache
          docker compose -f "docker-compose-test.yml" up -d
          
          {
            echo "Container logs:"
            docker compose -f "docker-compose-test.yml" logs
            echo "Container status:"
            docker compose -f "docker-compose-test.yml" ps
            echo "Container inspection:"
            docker compose -f "docker-compose-test.yml" ps -q | xargs -r docker inspect
          } > container.log
          
          mvn test -Dskiptests -Pplaywright-tests

      - name: Security Scan
        run: |
          docker scan --accept-license --file "docker-compose-test.yml" --exclude-base
          docker scan --accept-license --file "docker-compose-test.yml" --exclude-base --severity=high
          docker scan --accept-license --file "docker-compose-test.yml" --exclude-base --severity=critical
      
      - name: Install jq
        run: sudo apt-get install -y jq
          
      - name: Security Scan
        run: |
          scan_result=$(docker scan --accept-license --file "docker-compose-test.yml" --exclude-base --json)
          echo "$scan_result" | jq '.vulnerabilities[] | select(.severity == "high" or .severity == "critical")' > /dev/null
          if [ $? -eq 0 ]; then
            echo "High or critical vulnerabilities found!"
            exit 1
          fi

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            target/surefire-reports/**/*.xml
            target/failsafe-reports/**/*.xml
            container.log