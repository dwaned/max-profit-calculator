name: Container Testing & Security Scan

on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read
  issues: write
  security-events: write
  packages: read

env:
  DOCKER_HOST: "unix:///var/run/docker.sock"
  MAVEN_OPTS: "-Xmx2048m"
  TESTCONTAINERS_RYUK_DISABLED: true

run-name: Container Testing & Security Scan

jobs:
  container-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Set up Docker daemon
        run: |
          sudo mkdir -p /etc/docker
          echo '{
            "features": {
              "buildkit": true
            },
            "experimental": true
          }' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          sudo chmod 666 /var/run/docker.sock

      - name: Install Docker Compose
        run: |
          mkdir -p ~/.docker/cli-plugins
          curl -SL "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-$(uname -m)" -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Build JAR
        run: mvn install -DskipTests

      - name: Run Container Tests
        run: mvn test -Pcontainer-tests

      - name: Build and Start Docker Compose
        run: |
          docker compose version
          docker compose ps
        timeout-minutes: 10

      - name: Run Playwright Tests
        run: mvn test -Pplaywright-tests
        env:
          CI: true

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: target/surefire-reports/**/*.xml

      - name: Upload Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: "**/*.log"

      - name: Cleanup
        if: always()
        run: echo "Cleaning up..."
